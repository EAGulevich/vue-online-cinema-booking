/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ErrorResponse,
  Movie,
  MovieSession
} from '.././models';

import getMoviesMutator from '../../api/custom-instance';
import getMoviesMovieIdSessionsMutator from '../../api/custom-instance';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
 */
export const getMovies = (
    
 signal?: AbortSignal
) => {
      
      
      return getMoviesMutator<Movie[]>(
      {url: `/movies`, method: 'GET', signal
    },
      );
    }
  



export const getGetMoviesQueryKey = () => {
    return [
    'movies'
    ] as const;
    }

    
export const getGetMoviesQueryOptions = <TData = Awaited<ReturnType<typeof getMovies>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetMoviesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMovies>>> = ({ signal }) => getMovies(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMovies>>, TError, TData> 
}

export type GetMoviesQueryResult = NonNullable<Awaited<ReturnType<typeof getMovies>>>
export type GetMoviesQueryError = unknown


/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
 */

export function useGetMovies<TData = Awaited<ReturnType<typeof getMovies>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMoviesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞
 */
export const getMoviesMovieIdSessions = (
    movieId: MaybeRef<number>,
 signal?: AbortSignal
) => {
      movieId = unref(movieId);
      
      return getMoviesMovieIdSessionsMutator<MovieSession[]>(
      {url: `/movies/${movieId}/sessions`, method: 'GET', signal
    },
      );
    }
  



export const getGetMoviesMovieIdSessionsQueryKey = (movieId?: MaybeRef<number>,) => {
    return [
    'movies',movieId,'sessions'
    ] as const;
    }

    
export const getGetMoviesMovieIdSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getMoviesMovieIdSessions>>, TError = ErrorResponse>(movieId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMoviesMovieIdSessions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetMoviesMovieIdSessionsQueryKey(movieId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMoviesMovieIdSessions>>> = ({ signal }) => getMoviesMovieIdSessions(movieId, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(movieId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMoviesMovieIdSessions>>, TError, TData> 
}

export type GetMoviesMovieIdSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getMoviesMovieIdSessions>>>
export type GetMoviesMovieIdSessionsQueryError = ErrorResponse


/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞
 */

export function useGetMoviesMovieIdSessions<TData = Awaited<ReturnType<typeof getMoviesMovieIdSessions>>, TError = ErrorResponse>(
 movieId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMoviesMovieIdSessions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMoviesMovieIdSessionsQueryOptions(movieId,options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




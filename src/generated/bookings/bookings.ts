/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  PostBookingsBookingIdPayments200,
  PostBookingsBookingIdPayments404,
  PostBookingsBookingIdPayments409,
  PostBookingsBookingIdPayments500
} from '.././models';

import postBookingsBookingIdPaymentsMutator from '../../api/custom-instance';




/**
 * –û—Ç–º–µ—á–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ.
 * @summary –û–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export const postBookingsBookingIdPayments = (
    bookingId: MaybeRef<string>,
 signal?: AbortSignal
) => {
      bookingId = unref(bookingId);
      
      return postBookingsBookingIdPaymentsMutator<PostBookingsBookingIdPayments200>(
      {url: `/bookings/${bookingId}/payments`, method: 'POST', signal
    },
      );
    }
  


export const getPostBookingsBookingIdPaymentsMutationOptions = <TError = PostBookingsBookingIdPayments404 | PostBookingsBookingIdPayments409 | PostBookingsBookingIdPayments500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBookingsBookingIdPayments>>, TError,{bookingId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postBookingsBookingIdPayments>>, TError,{bookingId: string}, TContext> => {

const mutationKey = ['postBookingsBookingIdPayments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBookingsBookingIdPayments>>, {bookingId: string}> = (props) => {
          const {bookingId} = props ?? {};

          return  postBookingsBookingIdPayments(bookingId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBookingsBookingIdPaymentsMutationResult = NonNullable<Awaited<ReturnType<typeof postBookingsBookingIdPayments>>>
    
    export type PostBookingsBookingIdPaymentsMutationError = PostBookingsBookingIdPayments404 | PostBookingsBookingIdPayments409 | PostBookingsBookingIdPayments500

    /**
 * @summary –û–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export const usePostBookingsBookingIdPayments = <TError = PostBookingsBookingIdPayments404 | PostBookingsBookingIdPayments409 | PostBookingsBookingIdPayments500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBookingsBookingIdPayments>>, TError,{bookingId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postBookingsBookingIdPayments>>,
        TError,
        {bookingId: string},
        TContext
      > => {

      const mutationOptions = getPostBookingsBookingIdPaymentsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
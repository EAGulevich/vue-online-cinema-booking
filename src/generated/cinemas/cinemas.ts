/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  Cinema,
  ErrorResponse,
  MovieSession
} from '.././models';

import getCinemasMutator from '../../api/custom-instance';
import getCinemasCinemaIdSessionsMutator from '../../api/custom-instance';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
 */
export const getCinemas = (
    
 signal?: AbortSignal
) => {
      
      
      return getCinemasMutator<Cinema[]>(
      {url: `/cinemas`, method: 'GET', signal
    },
      );
    }
  



export const getGetCinemasQueryKey = () => {
    return [
    'cinemas'
    ] as const;
    }

    
export const getGetCinemasQueryOptions = <TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetCinemasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCinemas>>> = ({ signal }) => getCinemas(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData> 
}

export type GetCinemasQueryResult = NonNullable<Awaited<ReturnType<typeof getCinemas>>>
export type GetCinemasQueryError = unknown


/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
 */

export function useGetCinemas<TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCinemasQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –¥–ª—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
 */
export const getCinemasCinemaIdSessions = (
    cinemaId: MaybeRef<number>,
 signal?: AbortSignal
) => {
      cinemaId = unref(cinemaId);
      
      return getCinemasCinemaIdSessionsMutator<MovieSession[]>(
      {url: `/cinemas/${cinemaId}/sessions`, method: 'GET', signal
    },
      );
    }
  



export const getGetCinemasCinemaIdSessionsQueryKey = (cinemaId?: MaybeRef<number>,) => {
    return [
    'cinemas',cinemaId,'sessions'
    ] as const;
    }

    
export const getGetCinemasCinemaIdSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(cinemaId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetCinemasCinemaIdSessionsQueryKey(cinemaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>> = ({ signal }) => getCinemasCinemaIdSessions(cinemaId, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(cinemaId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData> 
}

export type GetCinemasCinemaIdSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>>
export type GetCinemasCinemaIdSessionsQueryError = ErrorResponse


/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –¥–ª—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
 */

export function useGetCinemasCinemaIdSessions<TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(
 cinemaId: MaybeRef<number>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCinemasCinemaIdSessionsQueryOptions(cinemaId,options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}




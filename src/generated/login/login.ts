/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ErrorResponse,
  PostLogin200,
  PostLoginBody
} from '.././models';

import postLoginMutator from '../../api/custom-instance';




/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞.
 * @summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const postLogin = (
    postLoginBody: MaybeRef<PostLoginBody>,
 signal?: AbortSignal
) => {
      postLoginBody = unref(postLoginBody);
      
      return postLoginMutator<PostLogin200>(
      {url: `/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLoginBody, signal
    },
      );
    }
  


export const getPostLoginMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: PostLoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: PostLoginBody}, TContext> => {

const mutationKey = ['postLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, {data: PostLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>
    export type PostLoginMutationBody = PostLoginBody
    export type PostLoginMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePostLogin = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: PostLoginBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof postLogin>>,
        TError,
        {data: PostLoginBody},
        TContext
      > => {

      const mutationOptions = getPostLoginMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    